<?xml version="1.0"?>
<launch>
  
  <arg name="front_camera" default='false'/>
  <arg name="rear_camera" default='false'/>
  <arg name="lidar" default='false'/>
  <arg name="gps" default='false'/>
  <arg name="urf" default='false'/>
  <arg name="imu" default='false'/>
  <arg name="kinect2" default='false'/>
  <arg name="f200" default='false'/>
  <arg name="joystick" default='false'/>
  <arg name="joystick_dev" default='/dev/input/js0'/>
  <arg name="twist_mux" default='true'/>
  

  <arg name="gazebo" default='false'/>
  <arg name="world_name" default="worlds/empty.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="R" default="0.0" />
  <arg name="P" default="0.0" />
  <arg name="Y" default="0.0" />
  
  <arg name="controllers" default='true'/>
  <arg name="moveit" default='false'/>
  <arg name="use_depth" default='false'/>
  <arg name="robot_localization" default='false'/>
  <arg name="move_base" default='false'/>
  <arg name="hector_slam" default='false'/>
  <arg name="gmapping_slam" default='false'/>
  <arg name="amcl" default='false'/>
  <arg name="have_map_file" default='false'/>
  <arg name="map_file" default="$(find robotican_common)/maps/UPlat.yaml"/>
  <arg name="rqt" default='false'/>
  


  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
  
  <group if="$(arg twist_mux)" >
		<include file="$(find robotican_common)/launch/twist_mux.launch">
		</include>
  </group>
  
  <group if="$(arg joystick)" >
	<rosparam file="$(find robotican_armadillo)/config/joystick_teleop.yaml" command="load"/>
	<include file="$(find robotican_common)/launch/joystick_teleop.launch">
	  <arg name="joystick_dev" value="$(arg joystick_dev)"/>
	 </include>
	 <node name="pan_tilt_joy_node" pkg="robotican_armadillo" type="pan_tilt_joy_node" output="screen" />
	 <node name="joy_increment_node" pkg="robotican_armadillo" type="joy_increment_node" output="screen" />
  </group>
  
  <group if="$(arg gazebo)">
    <env name="GAZEBO_MODEL_PATH" value="$(find robotican_common)/models:$(optenv GAZEBO_MODEL_PATH)"/>
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find robotican_armadillo)/description/models/armadillo_gazebo.xacro' 
	   controllers:=$(arg controllers)
	   front_camera:=$(arg front_camera)
	   rear_camera:=$(arg rear_camera)
	   lidar:=$(arg lidar)
	   urf:=$(arg urf)
	   imu:=$(arg imu)
	   gps:=$(arg gps)
	   kinect2:=$(arg kinect2)
	   f200:=$(arg f200)
	   " /> 
	  
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
     <arg name="world_name" value="$(arg world_name)"/>
     <!-- <arg name="world_name" value="$(find robotican_common)/worlds/UPlat.sdf"/> -->
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
    </include>
    

    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
	  args="-urdf -model armadillo -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/> 
    
    
    </group>
    
    <group unless="$(arg gazebo)">
		<group if="$(arg front_camera)">
			<include file="$(find robotican_hardware_interface)/launch/usb_cam.launch">
				<arg name="input_dev" value="/dev/video0" />
				<arg name="camera_frame_id" value="front_cam_link" />
				<arg name="pixel_format" value="yuyv" /> <!-- mjpeg, yuyv, uyvy  -->
				<arg name="image_width" value="640" />
				<arg name="image_height" value="480" />
				<arg name="node_name" value="front_cam" />
			</include>
		</group>
		<group if="$(arg rear_camera)">
			<include file="$(find robotican_hardware_interface)/launch/usb_cam.launch">
				<arg name="input_dev" value="/dev/video1" />
				<arg name="camera_frame_id" value="rear_cam_link" />
				<arg name="pixel_format" value="yuyv" /> <!-- mjpeg, yuyv, uyvy  -->
				<arg name="image_width" value="640" />
				<arg name="image_height" value="480" />
				<arg name="node_name" value="rear_cam" />
			</include>
		</group>
		<group if="$(arg lidar)">
			<include file="$(find robotican_hardware_interface)/launch/hokuyo_laser.launch">
				<arg name="input_dev" value="/dev/Hokuyo" />
				<arg name="frame_id" value="laser_link" />
				<arg name="min_ang" value="-1.81" />
				<arg name="max_ang" value="1.81" />
			</include>
		</group>
		<group if="$(arg kinect2)">
			<include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
				  <arg name="base_name"         value="kinect2"/>
				  <arg name="sensor"            value=""/>
				  <arg name="publish_tf"        value="true"/>
				  <arg name="base_name_tf"      value="kinect2"/>
				  <arg name="fps_limit"         value="-1.0"/>
				  <arg name="calib_path"        value="$(find kinect2_bridge)/data/"/>
				  <arg name="use_png"           value="false"/>
				  <arg name="jpeg_quality"      value="90"/>
				  <arg name="png_level"         value="1"/>
				  <arg name="depth_method"      value="default"/>
				  <arg name="depth_device"      value="-1"/>
				  <arg name="reg_method"        value="default"/>
				  <arg name="reg_device"        value="-1"/>
				  <arg name="max_depth"         value="12.0"/>
				  <arg name="min_depth"         value="0.1"/>
				  <arg name="queue_size"        value="5"/>
				  <arg name="bilateral_filter"  value="true"/>
				  <arg name="edge_aware_filter" value="true"/>
				  <arg name="worker_threads"    value="4"/>
				  <arg name="machine"           value="localhost"/>
				  <arg name="nodelet_manager"   value="kinect2"/>
				  <arg name="start_manager"     value="true"/>
				  <arg name="use_machine"       value="true"/>
				  <arg name="respawn"           value="true"/>
				  <arg name="use_nodelet"       value="true"/>
		    </include>
		</group>

		<group if="$(arg f200)">
<include file="$(find realsense)/realsense_f200_launch.launch">
	<arg name="cHeight" value="480" />
	<arg name="cWidth" value="640" />
	<arg name="dHeight" value="480" />
	<arg name="dWidth" value="640" />
	<arg name="pcScale" value="1000" />
	<arg name="enableDepth" value="1" />
	<arg name="enableColor" value="1" />
 </include>

 
		</group>

		<param name="robot_description" command="$(find xacro)/xacro.py '$(find robotican_armadillo)/description/models/armadillo.xacro'" />
		
		<rosparam file="$(find robotican_armadillo)/config/hardware_interface_config.yaml" command="load"/>
		
		<node name="dynamixel_manager" pkg="dynamixel_controllers" type="controller_manager.py" required="true" output="screen">          
		  <rosparam>
                namespace: dxl_manager
                serial_ports:
                 gripper_port:
                  port_name: "/dev/ttyS1"
                  baud_rate: 57142
                  min_motor_id: 1
                  max_motor_id: 2
                  update_rate: 20
                </rosparam>
		</node>
		
		<node name="arm_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py"
		  args="--manager=dxl_manager
				--port=gripper_port
		left_finger_controller
		right_finger_controller"
				output="screen"/>
				
		<node name="robotican_hardware_interface" pkg="robotican_hardware_interface" type="robotican_hardware_interface_node" respawn="false" output="screen" >
		
		  <rosparam file="$(find robotican_armadillo)/config/arm_config.yaml" command="load"/> 
		</node> 
    </group>
    
    

  <group if="$(arg controllers)">
    
    <rosparam file="$(find robotican_armadillo)/config/controllers.yaml" command="load"/>
    
    
    	<group if="$(arg robot_localization)">
		<include file="$(find robotican_common)/launch/robot_localization.launch"/>
		<param name="/mobile_base_controller/enable_odom_tf" value="false" />
	</group>
    
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="	  
      robot_state_controller
	  mobile_base_controller
	  torso_trajectory_controller
	  pan_tilt_controller
	  arm_trajectory_controller
	  gripper_controller
	  " />

     </group>

	<group if="$(arg move_base)">
		<rosparam file="$(find robotican_armadillo)/navigation/config/move_base_params.yaml" command="load" ns="move_base"/>
		<rosparam file="$(find robotican_armadillo)/navigation/config/costmap_common_params.yaml" command="load" ns="move_base/global_costmap" />
		<rosparam file="$(find robotican_armadillo)navigation/config/costmap_common_params.yaml" command="load" ns="move_base/local_costmap" />
		<rosparam file="$(find robotican_armadillo)/navigation/config/local_costmap_params.yaml" command="load" ns="move_base/local_costmap" />
		<rosparam file="$(find robotican_armadillo)/navigation/config/global_costmap_params.yaml" command="load" ns="move_base/global_costmap"/>
		<include file="$(find robotican_common)/launch/move_base.launch">
		 </include>
	</group>

    <group if="$(arg gmapping_slam)">
      <include file="$(find robotican_common)/launch/gmapping_slam.launch"/>
      </group>
      
    <group if="$(arg hector_slam)">
	<include file="$(find robotican_common)/launch/hector_slam.launch"/>
    </group>
	
	<group if="$(arg moveit)">
		<include file="$(find robotican_armadillo)/moveit/launch/move_group.launch" >
			<arg name="moveit_depth" value="$(arg use_depth)"/>
		</include>
	</group>

	
 <group if="$(arg have_map_file)">

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
</group>

        <group if="$(arg amcl)">
  <include file="$(find robotican_common)/launch/amcl_diff.launch">
      <arg name="x" value="$(arg x)"/>
  <arg name="y" value="$(arg y)"/>
  <arg name="Y" value="$(arg Y)" />
</include>
  </group>



  
	<group if="$(arg rqt)">
		<node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" output="screen" respawn="false">
      </node>
	</group>
	<group unless="$(arg amcl)">
		<group unless="$(arg hector_slam)">
			<node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 /map /odom 20" />
		</group>
	</group>
</launch>

